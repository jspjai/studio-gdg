'use server';

/**
 * @fileOverview Generates a detailed vulnerability report for a given web application URL.
 *
 * - generateVulnerabilityReport - A function that generates the vulnerability report.
 * - GenerateVulnerabilityReportInput - The input type for the generateVulnerabilityReport function.
 * - GenerateVulnerabilityReportOutput - The return type for the generateVulnerabilityReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateVulnerabilityReportInputSchema = z.object({
  targetUrl: z.string().url().describe('The URL of the web application to scan for vulnerabilities.'),
});

export type GenerateVulnerabilityReportInput = z.infer<typeof GenerateVulnerabilityReportInputSchema>;

const VulnerabilityDetailsSchema = z.object({
    vulnerability: z.string().describe('The name of the vulnerability found.'),
    severity: z.enum(['Critical', 'High', 'Medium', 'Low']).describe('The severity level of the vulnerability.'),
    description: z.string().describe('A detailed description of the vulnerability.'),
    remediation: z.string().describe('Step-by-step instructions on how to fix the vulnerability.'),
});

const GenerateVulnerabilityReportOutputSchema = z.object({
    reportSummary: z.string().describe('A summary of the vulnerability scan results.'),
    vulnerabilities: z.array(VulnerabilityDetailsSchema).describe('An array of vulnerabilities found during the scan.'),
    authenticationCheckPassed: z.boolean().describe('Indicates whether the authentication check passed.'),
    authenticationCheckDetails: z.string().optional().describe('Details about the authentication check, if it failed.'),
});

export type GenerateVulnerabilityReportOutput = z.infer<typeof GenerateVulnerabilityReportOutputSchema>;

export async function generateVulnerabilityReport(input: GenerateVulnerabilityReportInput): Promise<GenerateVulnerabilityReportOutput> {
  return generateVulnerabilityReportFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateVulnerabilityReportPrompt',
  input: {schema: GenerateVulnerabilityReportInputSchema},
  output: {schema: GenerateVulnerabilityReportOutputSchema},
  prompt: `You are a cybersecurity expert specializing in web application vulnerability assessment.
  Your task is to analyze the provided web application URL and generate a detailed vulnerability report.

  Analyze the target web application at the following URL: {{{targetUrl}}}

  The report should include:
  - A summary of the scan results, highlighting the key findings.
  - A list of identified vulnerabilities, including their names, severity levels (Critical, High, Medium, Low), descriptions, and step-by-step remediation instructions.
  - An assessment of whether the application requires authentication to access certain areas and whether the tool was able to authenticate and test those areas. Include details if the authentication check failed.

  Ensure the report is clear, concise, and actionable, providing developers with the information they need to address the identified vulnerabilities effectively.`,
});

const generateVulnerabilityReportFlow = ai.defineFlow(
  {
    name: 'generateVulnerabilityReportFlow',
    inputSchema: GenerateVulnerabilityReportInputSchema,
    outputSchema: GenerateVulnerabilityReportOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
