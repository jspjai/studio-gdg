
'use client';

import { useRef } from 'react';
import { format } from 'date-fns';
import { ShieldCheck, ShieldX, AlertTriangle, ChevronsRight, FileText, Download } from 'lucide-react';
import type { ScanHistoryItem } from '@/lib/types';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { getSeverityBadgeClass } from '@/lib/utils';
import { Separator } from '../ui/separator';
import { Button } from '../ui/button';

interface VulnerabilityReportProps {
  scanItem: ScanHistoryItem;
}

export default function VulnerabilityReport({ scanItem }: VulnerabilityReportProps) {
  const { targetUrl, scanDate, riskScore, report } = scanItem;
  const { reportSummary, vulnerabilities, authenticationCheckPassed, authenticationCheckDetails } = report;
  const reportRef = useRef<HTMLDivElement>(null);

  const countSeverity = (severity: string) => vulnerabilities.filter(v => v.severity === severity).length;
  const criticalCount = countSeverity('Critical');
  const highCount = countSeverity('High');
  const mediumCount = countSeverity('Medium');
  const lowCount = countSeverity('Low');

  const handleDownloadPdf = async () => {
    const element = reportRef.current;
    if (!element) return;

    const { default: jsPDF } = await import('jspdf');
    const { default: html2canvas } = await import('html2canvas');

    const canvas = await html2canvas(element, { scale: 2, backgroundColor: null });
    const data = canvas.toDataURL('image/png');

    const pdf = new jsPDF('p', 'mm', 'a4');
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
    const imgX = (pdfWidth - imgWidth * ratio) / 2;
    const imgY = 10;

    pdf.addImage(data, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
    pdf.save(`vulnerability-report-${new Date().toISOString().split('T')[0]}.pdf`);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold tracking-tight break-all">Scan Report for {targetUrl}</h1>
          <p className="text-muted-foreground">
            Scanned on {format(new Date(scanDate), 'PPP p')}
          </p>
        </div>
        <Button onClick={handleDownloadPdf}>
          <Download className="mr-2 h-4 w-4" />
          Download PDF
        </Button>
      </div>

      <div ref={reportRef} className="p-4 rounded-lg bg-background">
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Risk Score</CardTitle>
              <AlertTriangle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{riskScore}</div>
              <p className="text-xs text-muted-foreground">Overall risk assessment score</p>
            </CardContent>
          </Card>
          <Card className="border-red-500/50">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Critical</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{criticalCount}</div>
              <p className="text-xs text-muted-foreground">Critical vulnerabilities</p>
            </CardContent>
          </Card>
          <Card className="border-orange-500/50">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">High</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{highCount + mediumCount}</div>
              <p className="text-xs text-muted-foreground">High & Medium vulnerabilities</p>
            </CardContent>
          </Card>
          <Card className="border-blue-500/50">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Low</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{lowCount}</div>
              <p className="text-xs text-muted-foreground">Low severity issues</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid gap-6 md:grid-cols-3 mt-6">
          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Scan Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">{reportSummary}</p>
            </CardContent>
          </Card>
          <Card className={authenticationCheckPassed ? 'border-green-500/50' : 'border-yellow-500/50'}>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {authenticationCheckPassed ? <ShieldCheck className="h-5 w-5 text-green-500" /> : <ShieldX className="h-5 w-5 text-yellow-500" />}
                Authentication Check
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="font-semibold text-lg">{authenticationCheckPassed ? 'Passed' : 'Failed'}</p>
              {authenticationCheckDetails && <p className="text-sm text-muted-foreground">{authenticationCheckDetails}</p>}
            </CardContent>
          </Card>
        </div>

        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Vulnerabilities Found ({vulnerabilities.length})</CardTitle>
          </CardHeader>
          <CardContent>
            {vulnerabilities.length > 0 ? (
              <Accordion type="single" collapsible className="w-full">
                {vulnerabilities.map((vuln, index) => (
                  <AccordionItem value={`item-${index}`} key={index}>
                    <AccordionTrigger>
                      <div className="flex items-center gap-4 flex-1 text-left">
                        <Badge className={getSeverityBadgeClass(vuln.severity)}>{vuln.severity}</Badge>
                        <span className="font-semibold">{vuln.vulnerability}</span>
                      </div>
                    </AccordionTrigger>
                    <AccordionContent className="space-y-4 px-2">
                      <div>
                        <h4 className="font-semibold text-foreground">Description</h4>
                        <p className="text-muted-foreground">{vuln.description}</p>
                      </div>
                      <Separator />
                      <div>
                        <h4 className="font-semibold text-foreground">Remediation Steps</h4>
                        <div className="prose prose-sm dark:prose-invert max-w-none text-muted-foreground whitespace-pre-wrap">
                        {vuln.remediation.split('\n').map((step, i) => (
                            step.trim() && <p key={i} className="flex items-start gap-2"><ChevronsRight className="w-4 h-4 mt-1 shrink-0 text-accent" /><span>{step}</span></p>
                        ))}
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            ) : (
              <div className="text-center py-8">
                <ShieldCheck className="mx-auto h-12 w-12 text-green-500" />
                <p className="mt-4 font-semibold">No vulnerabilities found.</p>
                <p className="text-muted-foreground">The scan completed without identifying any security issues.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
